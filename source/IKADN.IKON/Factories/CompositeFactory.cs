// Copyright © 2019 Ivan Kravarščan. All rights reserved. Licensed under the 
// LGPL License. See License.txt in the project root for license information.

using System;
using Ikadn.Ikon.Types;

namespace Ikadn.Ikon.Factories
{
	/// <summary>
	/// IKADN object factory for composite IKON objects.
	/// </summary>
	public class CompositeFactory : IIkadnObjectFactory
	{
		/// <summary>
		/// Sign for IKADN composite object.
		/// </summary>
		public static readonly char OpeningSign = '{';

		/// <summary>
		/// Closing character for IKON composite object in textual
		/// representation.
		/// </summary>
		public static readonly char ClosingChar = '}';

		/// <summary>
		/// Sign for IKADN composite object.
		/// </summary>
		public char Sign
		{
			get { return OpeningSign; }
		}

		/// <summary>
		/// Parses input for a IKADN object.
		/// </summary>
		/// <param name="reader">IKADN parser instance.</param>
		/// <returns>IKADN value generated by factory.</returns>
		public IkadnBaseObject Parse(IkadnReader reader)
		{
			if (reader == null)
				throw new System.ArgumentNullException("reader");

			var res = new IkonComposite(Ikadn.Ikon.IkonParser.ReadIdentifier(reader));

			while (reader.PeekNextNonwhite() != ClosingChar)
			{
				string memberName = Ikadn.Ikon.IkonParser.ReadIdentifier(reader);
				
				string startPosition = reader.PositionDescription;
				if (reader.HasNextObject())
					res[memberName] = reader.ReadObject();
				else
					throw new FormatException("Characters from " + startPosition + " to " + reader.PositionDescription + " couldn't be parsed as IKADN value");
			}
			reader.Read();

			return res;
		}
	}
}
